# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2010, The Kivy Authors
# This file is distributed under the same license as the Kivy package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Kivy 1.10.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-05-13 08:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../sources/gettingstarted/events.rst:2
msgid "Events"
msgstr "Events(翻訳済み)"

#: ../../sources/gettingstarted/events.rst:4
msgid "Kivy is mostly `event-based <http://en.wikipedia.org/wiki/Event-driven_programming>`_, meaning the flow of the program is determined by events."
msgstr ""
"Kivyは `イベントベース <https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88_(%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)>`_ "
"で、プログラムの流れを意味するイベントによって決定されます。

#: ../../sources/gettingstarted/events.rst:7
msgid "**Clock events**"
msgstr "**Clock events(クロックイベント)**"

#: ../../sources/gettingstarted/events.rst:12
msgid "The :doc:`/api-kivy.clock` allows you to schedule a function call in the future as a one-time event with :meth:`~kivy.clock.ClockBase.schedule_once`, or as a repetitive event with :meth:`~kivy.clock.ClockBase.schedule_interval`."
msgstr ""
":doc:`/api-kivy.clock` は、:meth:`~kivy.clock.ClockBase.schedule_once`  に"
"将来的に一回限りのイベントを :meth:`~kivy.clock.ClockBase.schedule_interval` "
"に繰り返し行うイベントをスケジュールできます。"

#: ../../sources/gettingstarted/events.rst:16
msgid "You can also create Triggered events with :meth:`~kivy.clock.ClockBase.create_trigger`. Triggers have the advantage of being called only once per frame, even if you have scheduled multiple triggers for the same callback."
msgstr ""
" :meth:`~kivy.clock.ClockBase.create_trigger` を用いてトリガーイベントを作れます。"
"トリガーは、同じコールバックトリガーを複数スケジュールした場合でも各フレームごとに一度、"
"コールされるという利点を有しています。"

#: ../../sources/gettingstarted/events.rst:21
msgid "**Input events**"
msgstr "**Input events(入力イベント)**"

#: ../../sources/gettingstarted/events.rst:26
msgid "All the mouse click, touch and scroll wheel events are part of the :class:`~kivy.input.motionevent.MotionEvent`, extended by :doc:`/api-kivy.input.postproc` and dispatched through the :attr:`~kivy.core.window.WindowBase.on_motion` event in the :class:`Window <kivy.core.window.WindowBase>` class. This event then generates the :meth:`~kivy.uix.widget.Widget.on_touch_down`, :meth:`~kivy.uix.widget.Widget.on_touch_move` and :meth:`~kivy.uix.widget.Widget.on_touch_up` events in the :class:`~kivy.uix.widget.Widget`."
msgstr ""
"すべてのマウスクリック、タッチとスクロールは :class:`~kivy.input.motionevent.MotionEvent` の一部で、"
":doc:`/api-kivy.input.postproc` によって拡張され、Window クラスの中で"
" :attr:`~kivy.core.window.WindowBase.on_motion` イベントを通じて送られます。"
"これらのイベントは :class:`~kivy.uix.widget.Widget` にて :meth:`~kivy.uix.widget.Widget.on_touch_down` "
" 、 :meth:`~kivy.uix.widget.Widget.on_touch_move` と"
" :meth:`~kivy.uix.widget.Widget.on_touch_up` イベントを生み出します。"

#: ../../sources/gettingstarted/events.rst:36
msgid "For an in-depth explanation, have a look at :doc:`/api-kivy.input`."
msgstr "詳細な説明については、:doc:`/api-kivy.input` を見ます。"

#: ../../sources/gettingstarted/events.rst:38
msgid "**Class events**"
msgstr "**Class events(クラスイベント)**"

#: ../../sources/gettingstarted/events.rst:43
msgid "Our base class :class:`~kivy.event.EventDispatcher`, used by :class:`~kivy.uix.widget.Widget`, uses the power of our :doc:`/api-kivy.properties` for dispatching changes. This means when a widget changes its position or size, the corresponding event is automatically fired."
msgstr ""
":class:`~kivy.uix.widget.Widget` により用いられるベースクラスの  :class:`~kivy.event.EventDispatcher` "
"は変更を送るために、:doc:`/api-kivy.properties` を使います。"
"これは、Widgetの位置やサイズを変更したときに、対応するイベントが自動的に発生します。"

#: ../../sources/gettingstarted/events.rst:48
msgid "In addition, you have the ability to create your own events using :meth:`~kivy.event.EventDispatcher.register_event_type`, as the `on_press` and `on_release` events in the :class:`~kivy.uix.button.Button` widget demonstrate."
msgstr ""
"加えて、:class:`~kivy.uix.button.Button` widget内の `on_press` と `on_release` のイベントが示すように、"
" :meth:`~kivy.event.EventDispatcher.register_event_type` を使用して、独自のイベントを作成する機能を持っています。"

#: ../../sources/gettingstarted/events.rst:53
msgid "Another thing to note is that if you override an event, you become responsible for implementing all its behaviour previously handled by the base class. The easiest way to do this is to call `super()`::"
msgstr ""
"注意すべきもう一つのこととして、イベントを上書きした場合は、"
"ベースクラスで以前処理されたビへイビアを実装しなければなりません。"
"これを行う簡単な方法として `super()` を呼び出すことです::"

#: ../../sources/gettingstarted/events.rst:65
msgid "Get more familiar with events by reading the :doc:`/guide/events` documentation."
msgstr ":doc:`/guide/events`  のドキュメントを読むことで、イベントに慣れましょう。"

